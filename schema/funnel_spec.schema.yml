$schema: "https://json-schema.org/draft/2020-12/schema"
title: "funnel_spec.yml schema"
type: object
additionalProperties: false
required: [version, funnels]

properties:
  version:
    type: integer
    minimum: 1

  defaults:
    type: object
    additionalProperties: false
    properties:
      timezone:
        type: string
        # Keep this permissive (IANA e.g., "UTC", "America/New_York")
        pattern: "^[A-Za-z0-9_+./-]+$"
      sla:
        $ref: "#/$defs/slaSpec"
      metrics:
        type: array
        items:
          type: object
          additionalProperties: false
          required: [id, description]
          properties:
            id:
              $ref: "#/$defs/snakeId"
            description:
              type: string
              minLength: 1

  funnels:
    type: array
    minItems: 1
    items:
      $ref: "#/$defs/funnelSpec"

$defs:
  snakeId:
    type: string
    pattern: "^[a-z0-9_]+$"

  slaSpec:
    type: object
    additionalProperties: false
    properties:
      # At least one max_* should be provided when SLA is present
      max_days_in_step:
        type: integer
        minimum: 0
      max_hours_in_step:
        type: integer
        minimum: 0
      max_minutes_in_step:
        type: integer
        minimum: 0
      breach_severity:
        type: string
        enum: [warn, error]
      breach_tag:
        $ref: "#/$defs/snakeId"
    anyOf:
      - required: [max_days_in_step]
      - required: [max_hours_in_step]
      - required: [max_minutes_in_step]

  stepSpec:
    type: object
    additionalProperties: false
    required: [id, label]
    properties:
      id:        { $ref: "#/$defs/snakeId" }
      label:     { type: string, minLength: 1 }
      description: { type: string }
      requires:
        type: array
        items: { type: string, minLength: 1 }
      next:
        type: array
        items: { $ref: "#/$defs/snakeId" }
      exit_to:
        type: array
        items: { $ref: "#/$defs/snakeId" }
      steady_state: { type: boolean }
      terminal:     { type: boolean }
      urgent:       { type: boolean }
      remediation:
        type: array
        items: { type: string, minLength: 1 }
      sla:
        $ref: "#/$defs/slaSpec"
    allOf:
      # Prevent a step from being both steady_state and terminal
      - not:
          allOf:
            - required: [steady_state]
            - required: [terminal]
            - properties:
                steady_state: { const: true }
                terminal:     { const: true }

  funnelSpec:
    type: object
    additionalProperties: false
    required: [id, label, entity, steps]
    properties:
      id:         { $ref: "#/$defs/snakeId" }
      label:      { type: string, minLength: 1 }
      entity:     { type: string, minLength: 1 }
      key_field:  { type: string, minLength: 1 }
      description:{ type: string }
      steps:
        type: array
        minItems: 1
        items: { $ref: "#/$defs/stepSpec" }
